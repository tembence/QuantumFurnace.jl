var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Here you can find a detailed list of all functions exported by QuantumFurnace.jl.","category":"page"},{"location":"api/#Public-API","page":"API Reference","title":"Public API","text":"","category":"section"},{"location":"api/#QuantumFurnace.LiouvConfig","page":"API Reference","title":"QuantumFurnace.LiouvConfig","text":"LiouvConfig\n\nA configuration object that holds all the parameters for the core function: run_liouvillian, which constructs the Lindbladian of the thermalizing system.\n\nFields\n\nnum_qubits::Int64: The number of system qubits.\nwith_coherent::Bool: The option to add (=true) or omit (=false) the coherent term in the Lindbladian.\n\nIf added, the target state of the evolution will be the exactly the Gibbs state, otherwise only approximately.\n\nwith_linear_combination::Bool: The option to choose if we want to apply a convex combination of Lindbladians for a faster mixing. Could add extra complexities if the resulting transition function is not smooth. (See more in Theory).\na::Float64 and b::Float64: The parameters that specify the type of linear combination.\neta::Float64: in the case of the Metropolis linear combination, η is an additional coefficient that determines the accuracy of the time picture approximation.\npicture::AbstractPicture: The picture the simulation runs in (BOHR, ENERGY, TIME, TROTTER). The choice of the picture represents the levels of approximations we need to get form theory down to quantum circuitry.\nnum_energy_bits::Int64: Determines the how coarse the energy and time grid is and thus how accurate the approximations between each picture are.\nt0::Float64 and w0::Float64: are the time and energy units we are working with in the Riemann summed integrals. Of course, the smaller the better but also the costlier, and the two are intertwined due to Fourier: ω₀t₀ = 2π / N.\nnum_trotter_steps_per_t0::Int64: The number of Trotter steps used for a unit of time t₀.\n\nCurrently possible linear combinations:\n\n(a, b) = \n\n(0, 0) - no linear combination, simple Gaussian\n(>0, 0) - linear combination that results in Metropolis-like transition\n(>0, >0) - linear combination that results in Glauber transition (smoother)\n\nAvailable pictures:\n\nThe picture field can be set to one of the following options:\n\nBohrPicture(): The highest level picture where the jump operators and thus the Lindbladian are written in a decomposition of Bohr frequencies.\nEnergyPicture(): A level lower, in which the operators are approximated by energy integrals.\nTimePicture(): Another level lower, in which the energy approximates are written up as Fourier's of the temporal equals.\nTrotterPicture(): The lowest level, thus also the only one implementable on a quantum computer, in which all time evolutions are replaced via their Trotter series.\n\n\n\n\n\n","category":"type"},{"location":"generated/tutorial/#Tutorial:-Finding-a-Thermal-State","page":"Finding a Thermal State","title":"Tutorial: Finding a Thermal State","text":"","category":"section"},{"location":"generated/tutorial/","page":"Finding a Thermal State","title":"Finding a Thermal State","text":"In this tutorial, we will walk through the process of finding the steady-state thermal density matrix rho_ss for a system coupled to a thermal bath. The evolution of such a system is governed by the Lindblad master equation:","category":"page"},{"location":"generated/tutorial/","page":"Finding a Thermal State","title":"Finding a Thermal State","text":"fracdrhodt = -iH rho + sum_k gamma_k left( L_k rho L_k^dagger - frac12L_k^dagger L_k rho right)","category":"page"},{"location":"generated/tutorial/","page":"Finding a Thermal State","title":"Finding a Thermal State","text":"Our goal is to find the state rho_ss where fracdrhodt = 0.","category":"page"},{"location":"generated/tutorial/","page":"Finding a Thermal State","title":"Finding a Thermal State","text":"using QuantumFurnace\nusing LinearAlgebra","category":"page"},{"location":"generated/tutorial/#Step-1:-Define-the-System","page":"Finding a Thermal State","title":"Step 1: Define the System","text":"","category":"section"},{"location":"generated/tutorial/","page":"Finding a Thermal State","title":"Finding a Thermal State","text":"First, we define the system's Hamiltonian H. We'll use a simple two-qubit Heisenberg model.","category":"page"},{"location":"generated/tutorial/","page":"Finding a Thermal State","title":"Finding a Thermal State","text":"num_qubits = 2","category":"page"},{"location":"generated/tutorial/#Step-2:-Define-the-Environment","page":"Finding a Thermal State","title":"Step 2: Define the Environment","text":"","category":"section"},{"location":"generated/tutorial/","page":"Finding a Thermal State","title":"Finding a Thermal State","text":"Next, we define the jump operators L and the temperature T.","category":"page"},{"location":"generated/tutorial/","page":"Finding a Thermal State","title":"Finding a Thermal State","text":"temperature = 0.5\npicture = TimePicture()","category":"page"},{"location":"generated/tutorial/#Step-3:-Solve-for-the-Thermal-State","page":"Finding a Thermal State","title":"Step 3: Solve for the Thermal State","text":"","category":"section"},{"location":"generated/tutorial/","page":"Finding a Thermal State","title":"Finding a Thermal State","text":"Now, we can call our main solver function.","category":"page"},{"location":"generated/tutorial/#Step-4:-Analyze-the-Result","page":"Finding a Thermal State","title":"Step 4: Analyze the Result","text":"","category":"section"},{"location":"generated/tutorial/","page":"Finding a Thermal State","title":"Finding a Thermal State","text":"The resulting density matrix should have a trace of 1.","category":"page"},{"location":"generated/tutorial/","page":"Finding a Thermal State","title":"Finding a Thermal State","text":"","category":"page"},{"location":"generated/tutorial/","page":"Finding a Thermal State","title":"Finding a Thermal State","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#QuantumFurnace.jl","page":"Home","title":"QuantumFurnace.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for QuantumFurnace.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides a high-performance Julia suite for simulating open quantum systems... etc.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you are new, we recommend starting with the Tutorials to see how to solve common problems. For a detailed breakdown of all available functions, please see the API Reference.","category":"page"}]
}
